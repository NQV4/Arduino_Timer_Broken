//--------------------------------------------------------
// Timer1 Overflow Interrupt Interval : 1ms       (TIMER1_CNT x DIV / CLK [s])
// Waveform Generation Mode           : Normal    (WGM1[3:0] = 0000)
// Clock Freqency (CLK)               : 16 MHz    (0.0625 us)
// Clock Select   (CLK/DIV)           : CLK / 64  (CS1[2:0] = 011)
//--------------------------------------------------------
#define TIMER1_INTERVAL_MS 1  // Timer1 Overflow Interrupt Interval [ms]


#define TIMER1_CLK_FREQ_HZ 16000000  // Clock Freqency [Hz]
#define TIMER1_CLK_SEL 8             // Clock Select (CLK/1, CLK/8, CLK/64, CLK/256, CLK/1024)


#define TIMER1_CLK_DIV_HZ TIMER1_CLK_FREQ_HZ / TIMER1_CLK_SEL  // Timer1 Count Clock [Hz]
#define TIMER1_CNT TIMER1_CLK_DIV_HZ* TIMER1_INTERVAL_MS / 1000
#define TIMER1_CNT_INIT 65536 - TIMER1_CNT  // Timer1 Count Initial Value


//  Function ProtoType
void Timer1_Init(void);


//  Global Variables
unsigned long cnt_ms;
unsigned long cnt1ms;
unsigned long cnt_s;


//------------------------------------------------------------------------------
//  Interrupt Function
//------------------------------------------------------------------------------
ISR(TIMER1_OVF_vect)  // Timer/Counter1 Overflow
{
  TCNT1 = TIMER1_CNT_INIT;  //  TCNT1 – Timer/Counter1
  cnt_ms++;
  cnt1ms++;
  if (cnt1ms >= 1000) {
    cnt1ms = 0;
    cnt_s++;
  }
}

//--------------------------------------------------------
//  Setup
//--------------------------------------------------------
void setup() {
  Timer1_Init();
  pinMode(13, OUTPUT);
  pinMode(2, OUTPUT);
  pinMode(A0, INPUT);
  Serial.begin(9600);
}


unsigned long push_from = 0;
unsigned long pushed_from = 0;
bool was_push = false;
unsigned long double_time_over = 200;
unsigned long long_time_over = 1000;
int push_mode = 1;
//1 stanby
//2 single
//4 double
//8 long

//--------------------------------------------------------
//  Loop
//--------------------------------------------------------
void loop() {
  handle_button();
  // Serial.print("push_from: ");
  // Serial.println(push_from);
  // Serial.print("cnt_ms: ");
  // Serial.println(cnt_ms);
  // Serial.print("was_push: ");
  // Serial.println(was_push);
  // Serial.print("cnt_ms - pushed_from: ");
  // Serial.println(cnt_ms - pushed_from);
  // Serial.print("push_mode: ");
  // Serial.println(push_mode);
  // Serial.print("pushed_from: ");
  // Serial.println(pushed_from);
  switch (push_mode) {
    case 1:
      digitalWrite(2, LOW);
      digitalWrite(13, LOW);
      break;
    case 2:
      digitalWrite(2, HIGH);
      delay(300);
      break;
    case 4:
      digitalWrite(13, HIGH);
      delay(300);
      break;
    case 8:
      digitalWrite(2, HIGH);
      digitalWrite(13, HIGH);
      delay(300);
      break;
  }
}


void handle_button() {
  bool pushing = !digitalRead(A0);

  if (push_mode != 1) {
    was_push = false;
    push_mode = 1;
    pushed_from = 0;
  }

  if (pushing) {
    
    if (!was_push) {
      was_push = true;
      push_from = cnt_ms;
    }

    if (cnt_ms - pushed_from < double_time_over && pushed_from != 0 && push_mode == 1) {
      push_mode = 4;
    }

    if (cnt_ms - push_from >= long_time_over && push_from != 0 && push_mode == 1) {
      was_push = false;
      push_mode = 8;
    }
  } 
  else {

    if (was_push && push_mode == 1) {
      pushed_from = cnt_ms;
      was_push = false;
    }

    if (cnt_ms - pushed_from >= double_time_over && pushed_from != 0 && push_mode == 1) {
      push_mode = 2;

      pushed_from = 0;
    }

  }
}

//------------------------------------------------------------------------------
//  Timer 1 Initialize
//------------------------------------------------------------------------------
void Timer1_Init(void) {
  TCCR1A = 0x00;  // TCCR1A – Timer/Counter1 Control Register A

  TCCR1B = 0x00;           // TCCR1B – Timer/Counter1 Control Register B
#if (TIMER1_CLK_SEL == 1)  //   CS1[2:0] = 001 : clkI/O/1 (no prescaling)        16MHz     (0.0625 us)   16000
  TCCR1B |= (1 << CS10);
#elif (TIMER1_CLK_SEL == 8)     //   CS1[2:0] = 010 : clkI/O/8 (from prescaler)       2MHz      (0.5 us)      2000
  TCCR1B |= (1 << CS11);
#elif (TIMER1_CLK_SEL == 64)    //   CS1[2:0] = 011 : clkI/O/64 (from prescaler)      250kHz    (4 us)        250
  TCCR1B |= (1 << CS11) | (1 << CS10);
#elif (TIMER1_CLK_SEL == 256)   //   CS1[2:0] = 100 : clkI/O/256 (from prescaler)     62.5kHz   (16 us)       62.5
  TCCR1B |= (1 << CS12);
#elif (TIMER1_CLK_SEL == 1024)  //   CS1[2:0] = 101 : clkI/O/1024 (from prescaler)    15.625kHz (64 us)       15.625
  TCCR1B |= (1 << CS12) | (1 << CS10);
#endif


  TCNT1 = TIMER1_CNT_INIT;  // TCNT1 – Timer/Counter1

  TIMSK1 = 0x00;           // TIMSK1 – Timer/Counter1 Interrupt Mask Register
  TIMSK1 |= (1 << TOIE1);  //  TOIE1: Timer/Counter1, Overflow Interrupt Enable
}
